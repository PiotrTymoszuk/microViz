// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// colMed
NumericVector colMed(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_colMed(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colMed(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colGeoMean
NumericVector colGeoMean(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_colGeoMean(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colGeoMean(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colHarmMean
NumericVector colHarmMean(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_colHarmMean(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colHarmMean(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colVariance
NumericVector colVariance(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_colVariance(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colVariance(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colSD
NumericVector colSD(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_colSD(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colSD(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colGi
NumericVector colGi(NumericMatrix x, bool unbiased, bool na_rm);
RcppExport SEXP _microViz_colGi(SEXP xSEXP, SEXP unbiasedSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colGi(x, unbiased, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colQuant
NumericMatrix colQuant(NumericMatrix x, NumericVector probs, bool na_rm);
RcppExport SEXP _microViz_colQuant(SEXP xSEXP, SEXP probsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colQuant(x, probs, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colPerCi
NumericMatrix colPerCi(NumericMatrix x, double conf_level, bool na_rm);
RcppExport SEXP _microViz_colPerCi(SEXP xSEXP, SEXP conf_levelSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colPerCi(x, conf_level, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colBcaCi
NumericMatrix colBcaCi(NumericMatrix x, double conf_level, bool na_rm);
RcppExport SEXP _microViz_colBcaCi(SEXP xSEXP, SEXP conf_levelSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colBcaCi(x, conf_level, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colFreqRatio
NumericVector colFreqRatio(NumericMatrix x);
RcppExport SEXP _microViz_colFreqRatio(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colFreqRatio(x));
    return rcpp_result_gen;
END_RCPP
}
// colPercUnique
NumericVector colPercUnique(NumericMatrix x);
RcppExport SEXP _microViz_colPercUnique(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colPercUnique(x));
    return rcpp_result_gen;
END_RCPP
}
// Delta
NumericMatrix Delta(NumericMatrix x, NumericVector mu);
RcppExport SEXP _microViz_Delta(SEXP xSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Delta(x, mu));
    return rcpp_result_gen;
END_RCPP
}
// colMi
NumericVector colMi(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_colMi(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colMi(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// colMa
NumericVector colMa(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_colMa(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(colMa(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// poolVarPaired
double poolVarPaired(NumericVector x, NumericVector y);
RcppExport SEXP _microViz_poolVarPaired(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(poolVarPaired(x, y));
    return rcpp_result_gen;
END_RCPP
}
// poolVarWelch
double poolVarWelch(NumericVector x, NumericVector y);
RcppExport SEXP _microViz_poolVarWelch(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(poolVarWelch(x, y));
    return rcpp_result_gen;
END_RCPP
}
// poolVarStandard
double poolVarStandard(NumericVector x, NumericVector y);
RcppExport SEXP _microViz_poolVarStandard(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(poolVarStandard(x, y));
    return rcpp_result_gen;
END_RCPP
}
// poolVarLM
NumericVector poolVarLM(List x);
RcppExport SEXP _microViz_poolVarLM(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(poolVarLM(x));
    return rcpp_result_gen;
END_RCPP
}
// rowMed
NumericVector rowMed(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_rowMed(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMed(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowGeoMean
NumericVector rowGeoMean(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_rowGeoMean(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowGeoMean(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowHarmMean
NumericVector rowHarmMean(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_rowHarmMean(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowHarmMean(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowVariance
NumericVector rowVariance(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_rowVariance(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowVariance(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowSD
NumericVector rowSD(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_rowSD(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSD(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowGi
NumericVector rowGi(NumericMatrix x, bool unbiased, bool na_rm);
RcppExport SEXP _microViz_rowGi(SEXP xSEXP, SEXP unbiasedSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowGi(x, unbiased, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowQuant
NumericMatrix rowQuant(NumericMatrix x, NumericVector probs, bool na_rm);
RcppExport SEXP _microViz_rowQuant(SEXP xSEXP, SEXP probsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowQuant(x, probs, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowPerCi
NumericMatrix rowPerCi(NumericMatrix x, double conf_level, bool na_rm);
RcppExport SEXP _microViz_rowPerCi(SEXP xSEXP, SEXP conf_levelSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowPerCi(x, conf_level, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowBcaCi
NumericMatrix rowBcaCi(NumericMatrix x, double conf_level, bool na_rm);
RcppExport SEXP _microViz_rowBcaCi(SEXP xSEXP, SEXP conf_levelSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowBcaCi(x, conf_level, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowFreqRatio
NumericVector rowFreqRatio(NumericMatrix x);
RcppExport SEXP _microViz_rowFreqRatio(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowFreqRatio(x));
    return rcpp_result_gen;
END_RCPP
}
// rowPercUnique
NumericVector rowPercUnique(NumericMatrix x);
RcppExport SEXP _microViz_rowPercUnique(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowPercUnique(x));
    return rcpp_result_gen;
END_RCPP
}
// rowMi
NumericVector rowMi(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_rowMi(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMi(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// rowMa
NumericVector rowMa(NumericMatrix x, bool na_rm);
RcppExport SEXP _microViz_rowMa(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMa(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// Median
double Median(NumericVector x);
RcppExport SEXP _microViz_Median(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Median(x));
    return rcpp_result_gen;
END_RCPP
}
// geoMean
double geoMean(NumericVector x);
RcppExport SEXP _microViz_geoMean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(geoMean(x));
    return rcpp_result_gen;
END_RCPP
}
// harmMean
double harmMean(NumericVector x);
RcppExport SEXP _microViz_harmMean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(harmMean(x));
    return rcpp_result_gen;
END_RCPP
}
// Var
double Var(NumericVector x);
RcppExport SEXP _microViz_Var(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Var(x));
    return rcpp_result_gen;
END_RCPP
}
// SD
double SD(NumericVector x);
RcppExport SEXP _microViz_SD(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(SD(x));
    return rcpp_result_gen;
END_RCPP
}
// GiniCpp
double GiniCpp(NumericVector x, bool unbiased);
RcppExport SEXP _microViz_GiniCpp(SEXP xSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(GiniCpp(x, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// Quantile
NumericVector Quantile(NumericVector x, NumericVector probs);
RcppExport SEXP _microViz_Quantile(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(Quantile(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// perci
NumericVector perci(NumericVector theta, double conf_level);
RcppExport SEXP _microViz_perci(SEXP thetaSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(perci(theta, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// bca
NumericVector bca(NumericVector theta, double conf_level);
RcppExport SEXP _microViz_bca(SEXP thetaSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(bca(theta, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// Table
IntegerVector Table(NumericVector x);
RcppExport SEXP _microViz_Table(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Table(x));
    return rcpp_result_gen;
END_RCPP
}
// freqRatioCpp
double freqRatioCpp(NumericVector x);
RcppExport SEXP _microViz_freqRatioCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(freqRatioCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// percUniqueCpp
double percUniqueCpp(NumericVector x);
RcppExport SEXP _microViz_percUniqueCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(percUniqueCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// fillMat
NumericMatrix fillMat(NumericVector x, IntegerMatrix ind, int dim);
RcppExport SEXP _microViz_fillMat(SEXP xSEXP, SEXP indSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type ind(indSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(fillMat(x, ind, dim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_microViz_colMed", (DL_FUNC) &_microViz_colMed, 2},
    {"_microViz_colGeoMean", (DL_FUNC) &_microViz_colGeoMean, 2},
    {"_microViz_colHarmMean", (DL_FUNC) &_microViz_colHarmMean, 2},
    {"_microViz_colVariance", (DL_FUNC) &_microViz_colVariance, 2},
    {"_microViz_colSD", (DL_FUNC) &_microViz_colSD, 2},
    {"_microViz_colGi", (DL_FUNC) &_microViz_colGi, 3},
    {"_microViz_colQuant", (DL_FUNC) &_microViz_colQuant, 3},
    {"_microViz_colPerCi", (DL_FUNC) &_microViz_colPerCi, 3},
    {"_microViz_colBcaCi", (DL_FUNC) &_microViz_colBcaCi, 3},
    {"_microViz_colFreqRatio", (DL_FUNC) &_microViz_colFreqRatio, 1},
    {"_microViz_colPercUnique", (DL_FUNC) &_microViz_colPercUnique, 1},
    {"_microViz_Delta", (DL_FUNC) &_microViz_Delta, 2},
    {"_microViz_colMi", (DL_FUNC) &_microViz_colMi, 2},
    {"_microViz_colMa", (DL_FUNC) &_microViz_colMa, 2},
    {"_microViz_poolVarPaired", (DL_FUNC) &_microViz_poolVarPaired, 2},
    {"_microViz_poolVarWelch", (DL_FUNC) &_microViz_poolVarWelch, 2},
    {"_microViz_poolVarStandard", (DL_FUNC) &_microViz_poolVarStandard, 2},
    {"_microViz_poolVarLM", (DL_FUNC) &_microViz_poolVarLM, 1},
    {"_microViz_rowMed", (DL_FUNC) &_microViz_rowMed, 2},
    {"_microViz_rowGeoMean", (DL_FUNC) &_microViz_rowGeoMean, 2},
    {"_microViz_rowHarmMean", (DL_FUNC) &_microViz_rowHarmMean, 2},
    {"_microViz_rowVariance", (DL_FUNC) &_microViz_rowVariance, 2},
    {"_microViz_rowSD", (DL_FUNC) &_microViz_rowSD, 2},
    {"_microViz_rowGi", (DL_FUNC) &_microViz_rowGi, 3},
    {"_microViz_rowQuant", (DL_FUNC) &_microViz_rowQuant, 3},
    {"_microViz_rowPerCi", (DL_FUNC) &_microViz_rowPerCi, 3},
    {"_microViz_rowBcaCi", (DL_FUNC) &_microViz_rowBcaCi, 3},
    {"_microViz_rowFreqRatio", (DL_FUNC) &_microViz_rowFreqRatio, 1},
    {"_microViz_rowPercUnique", (DL_FUNC) &_microViz_rowPercUnique, 1},
    {"_microViz_rowMi", (DL_FUNC) &_microViz_rowMi, 2},
    {"_microViz_rowMa", (DL_FUNC) &_microViz_rowMa, 2},
    {"_microViz_Median", (DL_FUNC) &_microViz_Median, 1},
    {"_microViz_geoMean", (DL_FUNC) &_microViz_geoMean, 1},
    {"_microViz_harmMean", (DL_FUNC) &_microViz_harmMean, 1},
    {"_microViz_Var", (DL_FUNC) &_microViz_Var, 1},
    {"_microViz_SD", (DL_FUNC) &_microViz_SD, 1},
    {"_microViz_GiniCpp", (DL_FUNC) &_microViz_GiniCpp, 2},
    {"_microViz_Quantile", (DL_FUNC) &_microViz_Quantile, 2},
    {"_microViz_perci", (DL_FUNC) &_microViz_perci, 2},
    {"_microViz_bca", (DL_FUNC) &_microViz_bca, 2},
    {"_microViz_Table", (DL_FUNC) &_microViz_Table, 1},
    {"_microViz_freqRatioCpp", (DL_FUNC) &_microViz_freqRatioCpp, 1},
    {"_microViz_percUniqueCpp", (DL_FUNC) &_microViz_percUniqueCpp, 1},
    {"_microViz_fillMat", (DL_FUNC) &_microViz_fillMat, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_microViz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
